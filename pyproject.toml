[tool.poetry]
name = "truenas-scale-mcp-server"
version = "0.1.0"
description = "Model Context Protocol server for TrueNAS Scale Custom Apps management"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "truenas_mcp", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
mcp = "^1.0.0"
websockets = "^12.0"
pyyaml = "^6.0"
jsonschema = "^4.0"
aiohttp = "^3.12.14"
python-dotenv = "^1.0"
structlog = "^24.1.0"
pydantic = "^2.5.0"
requests = "^2.32.4"
pillow = "^11.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.0.0"
black = "^24.0.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
truenas-mcp-server = "truenas_mcp.mcp_server:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration  
[tool.ruff]
select = ["E", "W", "F", "I", "B", "C4", "UP"]
ignore = []
fixable = ["A", "B", "C", "D", "E", "F", "I"]
unfixable = []
line-length = 88
target-version = "py310"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "D103"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=src/truenas_mcp --cov-report=term-missing --cov-report=html --cov-fail-under=80"
testpaths = ["tests"]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/truenas_mcp"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]